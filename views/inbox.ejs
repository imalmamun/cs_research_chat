<%- include("./partials/header.ejs");%>
    <!-- ...undo heading... -->
    <div id="chat-container">
      <div id="search-container">
        <input type="text" placeholder="Search" />
      </div>
      <div id="conversation-list">
        <% if(typeof data != "undefined"){ %>
          <% data.forEach((conversation) => { %>
<!-- conversation creator is same to logged in user, so we need to show participant name and avatar -->
            <% if(conversation.creator.id == loggedInUser.userId){ %>
              <div class="conversation active" onclick="getMessages('<%= conversation._id %>', '<%= conversation.participant.name %>')">
                <% if(conversation.participant.avatar){ %>
                  <img src="<%= conversation.participant.avatar.url %>" alt="<%= conversation.participant.name %>" />
                  <% }else{ %>
                  <img src="./images/nophoto.png" alt="<%= conversation.participant.name %>" />                  
                  <% } %>
               
                <div class="title-text"><%= conversation.participant.name %></div>
                <div class="created-date"> <%= moment(conversation.last_updated).fromNow() %> </div>
                <!-- <div class="conversation-message">This is a message</div> -->
              </div>
              <% }else{ %>
              <div class="conversation" onclick="getMessages('<%= conversation._id %>', '<%= conversation.creator.name%>')">
                <%  if(conversation.participant.avatar){ %>
                  <img src="<%= conversation.creator.avatar.url %>" alt="<%= conversation.creator.name %>" />
                  <%  }else{ %>
                <img src="./images/nophoto.png" alt="<%= conversation.participant.name %>" />
                  <%  } %>
                <div class="title-text"><%= conversation.creator.name %></div>
                <div class="created-date"> <%= moment(conversation.last_updated).fromNow() %> </div>
                <!-- <div class="conversation-message">This is a message</div> -->
              </div>
              <%  } %>
              <%  }) %>
              <%  } %>
             <% if(data.length === 0){  %>
                <div class="nothing"><img src="./images/no-conversation.svg"></div>
              <% } %>
               <!-- show no conversation placeholder image for 0 conversations -->
      </div>

      
      <div id="conversation-modal-link">
        <a href="#" class="conversationModalLink" onclick="openModal()" >+</a>
      </div>
      <div id="chat-title">
        <span id="chat-title-name">Conversation Name</span>
        <div class="iconBtn">
          <img class="trash" src="./images/call.png" alt="Voice Call" onclick="voiceCall(this.id)"/>
          <img class="trash" src="./images/video-camera.png" alt="Video Call" onclick="videoCall(this.id)"/>
          <img class="more-option" src="./images/more.png" onclick="openOption()" alt="more"/>

          <!-- options -->
          <div class="option-container">
            <div class="option">
              <img class="trash" src="./images/trash.png" alt="Delete Conversation" onclick="deleteConversation(this.id)"/>
            </div>
            <div class="option">
              <img class="trash" src="./images/trash.png" alt="Delete Conversation" onclick="deleteConversation(this.id)"/>
            </div>
  
          </div>
        </div>

        
       
       
     
      </div>
      <!-- <div id="chat-message-list">
        <div class="message-row other-message">
          <div class="message-content">
            <img src="./images/user1.png" alt="Sumit" />
            <div class="message-text">Ok then</div>
            <div class="message-time">Apr 16</div>
          </div>
        </div>
        <div class="message-row you-message">
          <div class="message-content">
            <div class="message-text">Lorem ipsum dolor sit amet</div>
            <div class="message-time">Apr 16</div>
          </div>
        </div>
      </div> -->

 <!-- placeholder div if no messages are in messages area -->
 <div id="chat-message-list">
  <div class="nothing">select a conversation</div>
</div>
      <!-- send message form -->
      <form id="chat-form" method="post" enctype="multipart/form-data" >
        <label for="attachment" > <img src="./images/attachment.png" alt="Add Attachment" /> </label>
       
        <input type="file" multiple name="attachment" class="hide" id="attachment" />
        <input type="text" name="message" placeholder="Type a message"  autocomplete="off"/>
      </form>
      

 

    </div>
    <%- include('./partials/add-conversation-modal.ejs'); %>

   


  <!-- import socket io client from cdn -->
  <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/3.1.3/socket.io.min.js"></script> -->
  <script src="https://cdn.socket.io/3.1.3/socket.io.min.js" integrity="sha384-cPwlPLvBTa3sKAgddT6krw0cJat7egBga3DJepJyrLl4Q9/5WLra3rrnMcyTyOnh" crossorigin="anonymous"></script>
    <script>
      const moreOption = document.querySelector(".more-option");
      const optionContainer = document.querySelector(".option-container");
      const option = document.querySelector(".option");
      const chatTitleName = document.querySelector("#chat-title-name");
      const trash = document.querySelector(".trash");
      const form = document.querySelector("#chat-form");
      let participant = null;
      let current_conversation_id;
      const loggedinUserId = '<%= loggedInUser.userId %>';
      const messageContainer = document.querySelector("#chat-message-list");





// socket initialization
      const socket = io.connect('<%= process.env.APP_URL %>');
// handle new and live incomming messages from socket
      socket.on("new_message", data=> {
// will enter only if current conversation is on in any client sender/receiver
        if(data.message.conversation_id === current_conversation_id){
// message class
           const messageClass = data.message.sender.id === loggedinUserId ? 'you-message' : 'other-message';


          let senderAvatar = data.message.sender.avatar ? `<img class="participant_image" src="${data.message.sender.avatar.url}" alt="${data.message.sender.name}" />` : `<img class="participant_image" src="./images/nophoto.png" alt="${data.message.sender.name}" />`;
          //  console.log(data.message.sender.avatar);
          let showAvatar = data.message.sender.id === loggedinUserId ? '' : `${senderAvatar}`;


// message attachments
          let attachments = '<div class="attachments">';
          if(data.message.attachments && data.message.attachments.length > 0) {
            console.log(data.message.attachments.url);
              data.message.attachments.forEach(attachment => {
              const extension = attachment.url.split(/[#?]/)[0].split('.').pop().trim();
              console.log('extensiont: '+extension);
              if(extension == "pdf"){

                attachments += `<div class="pdf-attachment-div"><a href="${attachment.url}" target="_blank">${attachment.url}<img src="./images/attachment.png" alt="pdf attachment" /></a></div>`;

              } else{
               attachments += `<img class="attachment_image" src="${attachment.url}" /> `;
              }
            });
          }

          attachments += '</div>';
          // let allMessages = '';
         let messageHtml = ` <div class="message-row ${messageClass}">
          <div class="message-content">
            ${showAvatar}
            <div class="message-text">${data.message.message}</div>
            ${attachments}
            <div class="message-time">${moment(data.message.data_time).fromNow()}</div>
          </div>
        </div>`;
        // allmessages += messageHtml;

        // append the incoming message in message area as last item (i need to learn about this line of code)
        document.querySelector('#chat-message-list > .message-row:first-child').insertAdjacentHTML('beforeBegin', messageHtml);
        }
      })






// get all messages
      async function getMessages(conversation_id, current_conversation_name){
        let response = await fetch(`/inbox/messages/${conversation_id}`
        );
        const result = await response.json();
        if(!result.errors && result.data){
          form.style.visibility = "visible";
          const {data, userId, conversation_id} = result;
          participant = data.participant;
          current_conversation_id = conversation_id;

          if(data.messages){
            let allmessages = "";

            if(data.messages.length > 0){
              data.messages.forEach((message)=> {
                let senderAvatar = message.sender.avatar ? `${message.sender.avatar.url}`: `./images/nophoto.png`;
                const messageClass = message.sender.id === loggedinUserId ? 'you-message' : 'other-message';
                const showAvatar = message.sender.id === loggedinUserId ? '' : `<img class="participant_image"src="${senderAvatar}" alt="${message.sender.name}" />`;
                // message attachments
                let attachments = '<div class="attachments">';

                  if(message.attachments && message.attachments.length > 0) {
                    message.attachments.forEach(attachment => {
                      const extension = attachment.url.split(/[#?]/)[0].split('.').pop().trim();
              console.log(extension);
              console.log(JSON.stringify(attachment))

// pdf attachments
              if(extension == "pdf"){            
                attachments += `<div class="pdf-attachment-div"><a href="./uploads/attachments/${attachment.url}" target="_blank">${attachment.url}<img src="./images/attachment.png" alt="pdf attachment" /></a></div>`;
 
              } else{
                attachments += `<img class="attachment_image" src="${attachment.url}" /> `;

              }
                      // attachments += `<img src="./uploads/attachments/${attachment}" /> `;
                    });
                  }
                  attachments += '</div>';
                  // final message html
                  let messageHtml = ` <div class="message-row ${messageClass}">
          <div class="message-content">
            ${showAvatar}
            <div class="message-text">${message.text}</div>
            ${attachments}
            <div class="message-time">${moment(message.data_time).fromNow()}</div>
          </div>
        </div>`;
        allmessages += messageHtml;
        messageContainer.innerHTML = allmessages;
         });
        }else if(data.messages.length === 0) {
              messageContainer.innerHTML = '<div class="message-row"></div>';
              console.log('no masseged fetched');
                                                           }
              chatTitleName.textContent = current_conversation_name;
              trash.setAttribute('id', `${conversation_id}`)
        }
        }else{
          // toast message for failure
          console.log('failed in program of get message');
                  }
      }
      // sending message
      form.onsubmit = async function (event) {
    event.preventDefault();
    // creating toast
    const sendMessageFailureToast = Toastify({
          text: "Error sending message",
          duration: 1000,
        });
        let formData = new FormData(form);
        formData.append("receiverId", participant.id);
        formData.append("receiverName", participant.name);
        formData.append("avatar", participant.avatar || '');
        formData.append("conversationId", current_conversation_id);
       
       
        // sending the request to server
        let response = await fetch("/inbox/message", {
          method: "POST",
          body: formData,
        });
        // get the response and parse it to json
        const result = response.json();
        // console.log(JSON.stringify(result));
        if(!result.errors){
          form.reset(); // that will reset the form
        } else{ 
          // failure toast for sending message
          sendMessageFailureToast.showToast();
        }
      }




// delete conversation function
deleteConversation = async(conversationId) => {
  console.log("clicked deleteconversation"+ conversationId)
    const response = await fetch(`/inbox/delete/${conversationId}`, {
      method: "DELETE",
    })

    const result = response.json();
    if(result){
      

      alert("conversation and messages both deleted successfully");
      location.reload();
    }else{
      alert("conversation delete failed");
    }
}


// calling functions...
 function voiceCall(){
   alert("Voice call...", "calling...");
 }

 function videoCall(){
   alert("Video call...", "calling...");
 }


//  opening more opiton
function openOption(){
  optionContainer.style.display= "block";
  
}


window.addEventListener("click", closeOption());
    function closeOption(){
  var current = window.getComputedStyle(optionContainer).display;
 console.log("al")
  if(current == "block"){
    optionContainer.style.display= "none";
    }
    // else{
    //   optionContainer.style.display= "block";
    // }
  }
    </script>
  </body>
  
</html>
